{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","Box","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.72b4cdc7.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.scss';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__7JmWy\",\"Box\":\"Auth_Box__3S6L7\",\"Input\":\"Auth_Input__2gAsG\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.scss';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n        this.setState({ controls: updatedControls });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup };\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={[classes.Auth, classes.Box].join(' ')}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}