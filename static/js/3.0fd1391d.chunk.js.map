{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","containers/Checkout/Checkout.module.scss","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","Box","Burger","ingredients","style","textAlign","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","this","id","config","form","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.0fd1391d.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.scss';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3QfUK\",\"Box\":\"CheckoutSummary_Box__3s-bT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2aETv\",\"Box\":\"ContactData_Box__1Vhkq\",\"Input\":\"ContactData_Input__8Y8UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__A4qUX\"};","import React from 'react';\nimport classes from './CheckoutSummary.module.scss';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <div className={classes.Box}>\n                <h1>We hope it tastes well!</h1>\n                <div>\n                    <Burger ingredients={props.ingredients} />\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                    <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n                    <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.scss';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    }\n\n    render() {\n\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <div className={classes.Box}>\n                    <h4>Enter your Contact Data</h4>\n                    {form}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport classes from './Checkout.module.scss';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data')\n    }\n\n    render() {\n        let summary = <Redirect to=\"/burger-builer\" />\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/burger-builer\" /> : null;\n            summary = (\n                <div className={classes.Checkout}>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}\n                    />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData}\n                    />\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}